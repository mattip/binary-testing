name: nanobind

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/nanobind.yml'

  schedule:
  #        ┌───────────── minute (0 - 59)
  #        │ ┌───────────── hour (0 - 23)
  #        │ │ ┌───────────── day of the month (1 - 31)
  #        │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  #        │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  #        │ │ │ │ │
  - cron: "0 2 * * 0"

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_ONLY_BINARY: numpy
  FORCE_COLOR: 3
  PYTEST_TIMEOUT: 300

jobs:
  # This is the "main" test suite, which tests a large number of different
  # versions of default compilers and Python versions in GitHub Actions.
  standard:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest, windows-2022, macos-latest]
        python:
        - 'pypy-3.10-nightly'
        - 'pypy-3.9-nightly'

        # Items in here will either be added to the build matrix (if not
        # present), or add new keys to an existing matrix element if all the
        # existing keys match.
        #
        # We support an optional key: args, for cmake args
        include:
          - runs-on: ubuntu-latest
            python: 'pypy-3.9-nightly'

    name: "nanobind ${{ matrix.python }} • ${{ matrix.runs-on }} x64 ${{ matrix.args }}"
    runs-on: ${{ matrix.runs-on }}

    steps:
    - uses: actions/checkout@v3
      with:
        repository: wjakob/nanobind

    - name: Setup Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Update CMake
      uses: jwlawson/actions-setup-cmake@v1.13

    - name: Cache wheels
      if: runner.os == 'macOS'
      uses: actions/cache@v3
      with:
        # This path is specific to macOS - we really only need it for PyPy NumPy wheels
        # See https://github.com/actions/cache/blob/master/examples.md#python---pip
        # for ways to do this more generally
        path: ~/Library/Caches/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ matrix.python }}-x64-${{ hashFiles('tests/requirements.txt') }}

    - name: Setup annotations on Linux
      if: runner.os == 'Linux'
      run: python -m pip install pytest-github-actions-annotate-failures

    # First build - C++11 mode and inplace
    - name: Configure C++11 ${{ matrix.args }}
      run: >
        cmake -S . -B .
        ${{ matrix.args }}

    - name: Build
      run: cmake --build . -j 2

    - name: Test
      run: python -m pytest
